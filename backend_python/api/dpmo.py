import pandas as pd

def process_worker_file(file_stream):
    try:
      # -*- coding: utf-8 -*-
      """DPMO.ipynb

      Automatically generated by Colab.

      Original file is located at
          https://colab.research.google.com/drive/1s9slH6LC5GQ4opulPUuB6_CIDUAEe2Xc
      """

      # # Step 1: Upload the Excel file
      # from google.colab import files
      # uploaded = files.upload()
      # # Step 2: Read the Excel file using pandas
      # import pandas as pd

      # # Get the uploaded file name
      # filename = list(uploaded.keys())[0]

      # Load Excel file into a DataFrame
      dpmo_data = pd.read_excel(file_stream)
      # dpmo_data.head()  # Show the first few rows

      # List of columns you want to keep
      columns_to_keep = ['Dn','Type of Claim','Part/FLT', 'Quantity under Claim', 'Total Claim Value (In Rs)',
                        'Month', 'Claim Status by Quality','Claim Response days','Claim responsibility']

      # Filter the DataFrame
      dpmo_data = dpmo_data[columns_to_keep]
      # Remove rows with any NaN values in the selected columns
      dpmo_data = dpmo_data.dropna()

      # Show the filtered DataFrame
      # dpmo_data

      # for Drop Off time
      import datetime
      obj = {
          "duration": None,
          "claim_resp":None,
          "claim_data":{},
          "t_claim":0,
          "t_quantity":0,
          "t_claim_value":0,
          "claim_status":None
      }
      data=[]

      # value=[dn_count,t_c_to_pic_hour,t_pic_to_pac_hour,t_pac_to_inv_hour,quantity,lines,dn_value]

      # 2. Function to insert obj["ship_priority"]
      def insert(new_obj,name, value):
          if name not in new_obj:
              new_obj[name] = value

      # 3. Function to check if name and value exist
      def check(new_obj,name):
          return name in new_obj

      # main code
      # value=[t_claim,t_quantity,t_claim_value]

      for index,row in dpmo_data.iterrows():
        p=0
        for ob in data:
          if row['Month'] == ob["duration"] and row['Claim responsibility'] == ob["claim_resp"] and row['Claim Status by Quality'] == ob["claim_status"]:
            ob["t_claim"]+=1
            ob["t_quantity"]+=row['Quantity under Claim']
            ob["t_claim_value"]+=row['Total Claim Value (In Rs)']
            if check(ob["claim_data"],row['Part/FLT']):
              if check(ob["claim_data"][row['Part/FLT']],row["Type of Claim"]):
                ob["claim_data"][row['Part/FLT']][row["Type of Claim"]][0]+=1
                ob["claim_data"][row['Part/FLT']][row["Type of Claim"]][1]+=row['Quantity under Claim']
                ob["claim_data"][row['Part/FLT']][row["Type of Claim"]][2]+=row['Total Claim Value (In Rs)']
              else:
                insert(ob["claim_data"][row['Part/FLT']],row["Type of Claim"],[1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']])
            else:
              insert(ob["claim_data"],row['Part/FLT'],{row["Type of Claim"]:[1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]})
            p=1
            break
        if p==0:
          data.append({
                "duration": row['Month'],
                "claim_resp":row['Claim responsibility'],
                "claim_data":{row["Part/FLT"]:{row["Type of Claim"]:[1,row['Quantity under Claim'],row['Total Claim Value (In Rs)']]}},
                "t_claim":1,
                "t_quantity":row['Quantity under Claim'],
                "t_claim_value":row['Total Claim Value (In Rs)'],
                "claim_status":row['Claim Status by Quality']
                })

      # print(data)

      # len(data)
      return {
          "success": True,
          "message": "DPMO data processed successfully",
          "data": data
      }
    except Exception as e:
      return {
          "success": False,
          "message": str(e)
      }