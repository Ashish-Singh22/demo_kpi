import pandas as pd

def process_worker_file(file_stream):
    try:
        
        # -*- coding: utf-8 -*-
        """DN_shipment_KPI.ipynb

        Automatically generated by Colab.

        Original file is located at
            https://colab.research.google.com/drive/1zZTcG4IcBkRV9AiM9jRLqRaEUuoiYGwn
        """

        # # Step 1: Upload the Excel file
        # from google.colab import files
        # uploaded = files.upload()
        # # Step 2: Read the Excel file using pandas
        # import pandas as pd

        # # Get the uploaded file name
        # filename = list(uploaded.keys())[0]

        # Load Excel file into a DataFrame
        ship_dn_data = pd.read_excel(file_stream)
        # ship_dn_data.head()  # Show the first few rows

        from datetime import date

        my_date = ship_dn_data['SHIP_DATE'][0].date()
        # print(my_date)

        # List of columns you want to keep
        columns_to_keep = ['DELIVERY', 'SHIPMENT_PRIORITY', 'HR_TAKEN', 'DN_VAL',
                        'ITEM_COUNT', 'SHIPPED_QTY']

        # Filter the DataFrame
        ship_dn_data = ship_dn_data[columns_to_keep]
        # Remove rows with any NaN values in the selected columns
        ship_dn_data = ship_dn_data.dropna()

        # Show the filtered DataFrame
        # ship_dn_data.head()



        # for Drop Off time
        import datetime
        obj = {
            "date": my_date,
            "dn_count":0,
            "ship_priority":{},
            "organization":"D9M",
            "t_hour":0,
            "t_quantity":0,
            "t_item":0,
            "t_dn_value":0
        }

        # Content LPN

        # 1. Initialize the dictionary

        # value=[dn_count,hour,quantity,item,dn_value]

        # 2. Function to insert obj["ship_priority"]
        def insert(name, value):
            if name not in obj["ship_priority"]:
                obj["ship_priority"][name] = value

        # 3. Function to check if name and value exist
        def check(name):
            return name in obj["ship_priority"]

        # main code

        for index,row in ship_dn_data.iterrows():   
            obj["dn_count"]+=1
            obj["t_hour"]+=row["HR_TAKEN"]
            obj["t_quantity"]+=row["SHIPPED_QTY"]
            obj["t_item"]+=row["ITEM_COUNT"]
            obj["t_dn_value"]+=row["DN_VAL"]
            if (check(row["SHIPMENT_PRIORITY"])):
                obj["ship_priority"][row["SHIPMENT_PRIORITY"]][0] += 1
                obj["ship_priority"][row["SHIPMENT_PRIORITY"]][1] += row["HR_TAKEN"]
                obj["ship_priority"][row["SHIPMENT_PRIORITY"]][2] += row["SHIPPED_QTY"]
                obj["ship_priority"][row["SHIPMENT_PRIORITY"]][3] += row["ITEM_COUNT"]
                obj["ship_priority"][row["SHIPMENT_PRIORITY"]][4] += row["DN_VAL"]
            else:
                insert(row["SHIPMENT_PRIORITY"],[1,row["HR_TAKEN"],row["SHIPPED_QTY"],row["ITEM_COUNT"],row["DN_VAL"]])
                
        obj = {
            "date": obj["date"].strftime("%Y-%m-%d"),
            "dn_count":obj["dn_count"],
            "ship_priority":obj["ship_priority"],
            "organization":obj["organization"],
            "t_hour":obj["t_hour"],
            "t_quantity":obj['t_quantity'],
            "t_item":obj['t_item'],
            "t_dn_value":obj['t_dn_value']
        }
        
        return {'success': True, 'data': obj}
    except Exception as e:
        return {'success': False, 'message': str(e)}

        